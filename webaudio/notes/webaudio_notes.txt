
- questions:
  how to write to a buffer directly??
  how to play a buffer?


- AudioContext is the container for an audio graph
- an AudioNode can only be in one graph
- nodes are connected with AudioNode.connect and disconnect
- the more nodes in a graph, the higher the latency 
- nodes can be created through context factory methods or constructors,
  where context is passed as first arg
  - however, constructors allow you to set params at init time
    const analyserNode = new AnalyserNode(audioCtx, {
      fftSize: 2048,
      maxDecibels: -25,
    });


- some audio nodes inherit from AudioScheduledSourceNode, providing them with
  a start and stop method (which take times or are instant if not time passed
  - however, these are one time methods, you can't restart a node

- Audio nodes have an onended handler

- audio node params are AudioParam objects, and need to have values set through their methods
- audio params can be a-rate or k-rate, defined by the AudioNode

- AudioBuffer node gives us a direct buffer:
    const buffer = new AudioBuffer(context, {
      numberOfChannels: 1,
      length: 22050,
      sampleRate: 22050,
    });

AudioWorklets
********************************************************************************
https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_AudioWorklet
- each audio context has an AudioWorklet, which allows running code in the
  web audio worker thread
- we add code through the addModule(moduleURL, options) method, which loads
  a JS file to run in the worklet
  - addModule returns a promise that resolves once its loaded
    
    const audioCtx = new AudioContext();
    const audioWorklet = audioCtx.audioWorklet;
    audioWorklet.addModule('modules/bypassFilter.js', { credentials: 'omit' });

- With the processor registered, you can create a new AudioWorkletNode 
  which passes the audio through the processor's code when the node is linked
  into the chain of audio nodes along with any other audio nodes.

- note that we need to server with real server to bypass CORS issues,
  using python3 -m http.server serves local directory to port 8000


Developer File Guide (2023)
===========================

helpers.scm
  - util functions: symbol-append 
  - now contains helpers that were in utils.scm and process-helpers.scm too

midi-input.scm
  - midi-in: generic midi input function that accepts a device symbol as first name
    - normalizes to generic message
    - various device specific parse functions (fire, pad, etc)
    - looks up target controller to send messages to, based on meta
    - holds the hard mapping for midi/mode/controller routing 

controllers.scm
  - has the meta object
  - holds the arp controller

score.scm
  - make-score: the fun-obj for linear scores
  - necessary for tunes if they use the linear score system (instead of scenes)

seq-load-save.scm
  - serialization and saving/loading functions
  - sequencers do not depend on this, but it does depend on sequencer data structure
  - FUTURE: need to think about polymorphism for this and divergent sequencer code

step-sequencers.scm
  - defines step-seq obj, no inheritance
  - depends only on process-helpers.scm - I think
  - I think this can actually be deprecated and just rolled into chord-sequecer.scm

chord-sequencer.scm
  - defines chord-sequencer, no inheritance
  - depends only on process-helpers.scm - I think

controllers.scm
  - has the meta component
  - has the one controller factory, the arp controller, which gets a seq target set on it
  - but we can have multiple controllers instantiated - though this has not been done

tune/NAME-main.scm
  - top level file for a set, pulls in all deps, and all individual seq files
  - seqs are loaded up and assumed to be instanted as seq-1, seq-2, etc.

tune/NAME-seq-X.scm
  - instantiates a seq-X object from one of the sequencers
  - contains section functions for loading the seqs with data




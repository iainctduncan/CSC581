Hardware Controller Input
--------------------------

This page describes how hardware controller input works from the user's perspective.

The purpose of a controller is to provide a state container for modal editing,
where particular input motions might be used for a variety of state changes.
These usually fall into one of the following categories

* Selections: track, bar, step, etc.
* Submode selection: where a submode affects editing operations
* Data entry that is stored but not yet acted upon ("cold")
* Data entry that results in messages to sequencers to update data ("hot")

The best way to describe the workflow is probably to describe my own 
personal configuration and the input modes I have created for it.
I will first describe my MIDI hardware controller configuration.

I have four input devices:
* The Akai Fire, a 16x4 grid with miscellaneous extra buttons
* The grid, which is actually made up of two launchpads acting as one 16x8 grid
* Two keystep mini keyboards, which have keyboards, a mod and pitch bend ribbon,
  and various buttons. The larger of which also has 4 dials.

.. TODO photo

The operating paradigm is that when I'm editing I want to to use a global mechanism
to choose any selections that I want to persist **across modes**.
An example would be track selection - I don't want
to have re-select track 1 when moving between drum and step mode.
I also need a way to choose the active mode, which for simplicty I do from the same controller. 

In my mapping, the Fire acts as the global controller. Input to it
changes global selections that are state in the meta component, 
thus all the Fire buttons always do the same thing, regardless on active input mode. 

In my configuration, the fire grid rows are used to select

* Track
* Bank (unused at the moment)
* Bar
* Step

Additionally, the Fire has buttons along the bottom used to select the input mode.
Modes I have currently enabled include **drum**, **step**, **arp**, **perform**, and **copy**,
which each correspond to one input controller Scheme object. 
When I change modes, the various buttons and keys on the other three devices (grid, keyb-1, keyb-2)
mean different things, and different actions are "hot" - resulting in writes to sequence data.

One additional feature worth mentioning before getting into mode details is a trick
I came up with for entering numerical data from piano keyboards. 
As a jazz player, I have internalized the scale numbers to near instant recall.
So to enter the values 0-15 from a keyboard, I use two octaves of the C7 bebop scale,
where the note values of C, D, E, F, G, A, Bb, B correspond to 0 to 7.
This allows me to enter a series of numbers far faster than on conventional buttons.

Once we are in a mode, actions on the mode-specific input devices are, wherever possible,
idempotent. This on the principle that we should not ever *need* to look at a screen
for confirmation. If, once in a mode, a button does one thing, and always that thing, 
keeping track of where we are is straightforward (with some practice!).

So for example, if I am in Drum mode, input works (somewhat) like a drum machine,
I make selections and then hit a button corresponding to a step to write them all in.
We say that *step selection is hot*. It is the act of choosing a step that results
in all the selected field data being written to sequencer data.

The drum mode order of operations is roughly this:

* We make (or reuse) the current meta selections for track and bar
* We set some values with sliders
* Perhaps we select a pitch with keyb-2
* We then hit keyb-1 ("hot") to enter these notes, resulting in messages going
  to the sequencer for the currently selected track, which result in sequence
  data getting updated.

On the otherhand, when we are in step mode, the process is reversed - we
pick a step, and then any editing motions (notes, sliders, etc) are written in.
We say that *faders are hot*. We can keep moving faders, and they will keep writing
to the active step.

So the step mode order of operations is roughly this:
  
* We make (or reuse) the current meta selections for track and bar
* We pick a specific step from the Fire or keyb-2
* We then move sliders or play notes on keyb-1 to enter data.

It is important to note that we do not (necessarily) need to reselect everything
to write it in. For example, in Drum mode, if keyb-2 selects C5, the
selected pitch is C5, and that will be used for every step written until a new
pitch is selected. This can of course be configured, and in my personal 
(rather complex) input modes, I have included the ability to choose which 
parameter fields automatically persist or not across actions, with the
pitch bend and pedal used to create "shift-keys".

While this may sound intimidatingly complex, with practice it enables
extremely fast data entry.

Details of the mode mapping is on the Input Mode Manual page.

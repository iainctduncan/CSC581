Sequencer Implementation
========================
This page will look more closely at the internal workings of the sequencer components, which
are the heart of the ScmSeq system.

Fundamentally a sequencer is a component that:

* Stores various settings used in playback 
* Stores sequence data in internal vectors
* Keeps track of loop counters, both at a track and ptrack level
* Runs a function on a step to look up data in the vectors according
  to settings and the loop counters, outputing it as lists sent
  to other output functions

Sequencer objects follow the standard object model, and have, at a minimum,
the following elements:

* Settings that should be saved as part of a piece, stored in the **_** hash-table
  as keyword/value entries (e.g. :loop-length, :transpose, :time-factor).
* Internal variables that do not need to be saved, kept as local variables
  (e.g. current loop counter variables).
* Sequence data, stored as a collection of vectors, where each vector
  holds data for one ptrack. These vectors are in turn stored as part of the **_** hash-table.
* A **run-step** function, containing the logic used to run on every sequencer step,  
  including looking up data, outputing data, and scheduling the next run-step iteration.
* Various getter and setter functions that provide ways for other components
  to request or update data and settings.
* Various transport functions, such as **start**, **stop**, and **reset**.


Playback and Scheduling
-----------------------
The simplest possible sequencer would contain a run-step function, some data
for it to use, an output function, and some methods to start, stop, and reset the sequencer.

Scheduling is achieved by having the run-step function schedule the next iteration,
done by putting a lambda function wrapping run-step on to the scheduler. 
This has a number of interesting advantages over clocking an external source:

* Steps do not have to be same length - a sequencer can change the duration of a step
  programmatically or on receipt of a message from an external component, or according
  to an arbitrary (not necessarily even) schedule
* Sequencers are not bound to a meter or structure of time that comes from some higher level object,
  they can each have their own meter, timebase, and clocking
* Sequencers can be stopped, started, and sped up or slowed down independently of each other, 
  again under programmatic control

Scheduling in run-step uses one of the various S4M functions that enable putting a function
on the scheduler, such as: **delay**, **delay-t**, **delay-tq**. This allows a sequencer
to use a millisecond delay, a time-in-ticks delay, or a time-in-ticks that is quantized
to the global clock. 

Simple Example
---------------
Below is the an example of a very simple sequencer. We will not repeat
the boilerplate of the common object model, or show the getter and setter functions.

In this example, we can see the following:

* a **run-step** function that reschedules itself based on the **playing** and **:step-dur** variables
* a **play-step** function, called from run-step, that looks up sequence data for a particular step
* a **play-note** function, called from play-step, that outputs sequence data to the global **note-output**
  function as a hash-table with meaningful key names (:pitch, :dur, :vel)
* a sequence data store consisting of vectors for four ptracks, used for gate (per note muting),
  pitch, duration, and velocity

.. code:: Scheme

  ; example of a simple sequencer with four ptracks, but no separate ptrack loop controls
  
  (define (simple-seq name . init-args)
  
    (let ((playing? #f)             ; flag for if on or not (regardless of how clocked) 
          (delay-handle #f)         ; handle for self-scheduling
          (step-index 0)            ; step index within full pattern
  
          ; ordered list of the state keys for serialization
          (meta-keywords '(
            :channel :params :steps :step-dur :loop-len
          '))
  
          ; settings hash-table, holds serializable settings
          ; all of these can be overriden through constructor arguments
          (_  (hash-table         
            :params         8     ; number of param tracks 
            :steps          128   ; number of steps in a sequence
            :step-dur       120   ; step-duration in ticks
            :loop-len       #f    ; if set, is length of loops in steps, if #f, loop is length of sequence vector
            :channel        0     
            :seq-data       #f    ; sequence data, will be multi-dimensional vector 
            :time-factor    1     ; a multipler for the sequencers conception of time
            :mute           #f    ; is this sequencer muted
            )))          
 
      ; save am explicit reference to the current local environment
      (define env (curlet))

      ; step handler that does step logic, this is what gets scheduled
      (define (run-step)
        ; call play-step with current step-index
        (play-step step-index)
        ; update step counter, inc-to automatically rolls over to zero
        (inc-to! step-index (_ :loop-len))
        ; schedule next step if playing 
        (if playing? 
          (let ((delay-dur (* (_ :time-factor) (_ :step-dur))))
            ; here is the call to put the next iteration on the scheduler
            (set! delay-handle (delay-t delay-dur run-step))))) 

      
      ; function to look up values for an individual step and call play-note with them
      (define (play-step step)
        (let* ((loop-len (_ :loop-len))
               (step-pvals (map (lambda (param)
                                  (let* ((step-index (modulo step loop-len))
                                         ((_ :seq-data) param) step-index)))
                                (range 0 (_ :params)))))
            ; if there is data and the gate is open, call play-note
            (if (and (not (_ :mute)) (> (step-pvals 0) 0)) 
              (play-note step-pvals))))
  

      ; default play-note method, intent is that this is commonly overridden
      ; this calls the external note-output function
      (define (play-note step-data)
        (let* ((gate     (step-data 0))
               (dur      (step-data 1))
               (note-num (step-data 2))
               (vel      (step-data 3))
              )
          ; note-num zero (or #f) always means no output
          (if (and note-num (> note-num 0))
              ; call the note-ouput top level function which routes according to the tune setup
              (note-output (_ :channel) 
                (hash-table :dur dur-out  :pitch note-num   :vel vel)))))
 
      ; transport functions        
      ; stop cancels next scheduled iteration and stop playback
      (define (stop)
        (cancel-delay delay-handle)
        (set! playing? #f))
  
      ; reset state to beginning and start playback
      (define (start)
        (reset)
        (set! playing? #t)
        (run-step))
  
      (define (reset)
        (cancel-delay delay-handle)
        (set! step-index 0))
    
      (define (init-seq-data params steps)
        "initialize the internal sequence data"
        ; make a vector of {params} vectors to hold our seq data
        ; and initialize to zeros
        (set! (_ :seq-data) (make-vector params #f)) 
        (for-each 
          (lambda(i)(set! ((_ :seq-data) i) (make-vector steps 0))) 
          (range 0 params)))
   
      ; constructor logic
      (define (init init-args)
        "constructor, sets up values and initializes sequencer"
        ; call process-kwargs to setup kwarg settings
        (process-kwargs init-args)
        ; if initial seq data not passed in as constructor arg, make it
        (if (not (_ :seq-data))   (init-seq-data (_ :params) (_ :steps)))
        ; init loop-len and loop-top to num steps if not set in constructor
        (if (not (_ :loop-len)) (set! (_ :loop-len) (_ :steps)))
        (export-envs name))

      ; ... common object code and simple getters/setted omitted

))

Output from the sequencer is handled by the call to the globally defined **note-output** function,
sending it a hash-table of event data. The note-output function
is defined in **output.scm** and is intended to provide the user with a function that they
can override on a per-project basis to specify the destination of sequence data from each sequencer.
This way we can keep routing to specific instruments (likely to be unique to a piece) out
of the sequencer.

A sample, simple note output function is shown below that sends the output data out of
outlet 0 of the s4m object, prepended with a channel number so that it can be routed in Max.
This would likely passed to a Max subpatch that uses the makenote object or similar.

.. code:: Scheme

  ; note is a hashtable with keys :dur :note :vel :mod-1 :mod-2 :mod-3 :mod-4
  ; it's common to redefine this in the track specific tools to set which tracks
  ; get what kind of output
  (define (note-output channel note)
    ;(post "note-output" channel note)
    ; MIDI version: we send two mod args that get turned into modwheel and pitchbend
    (out 0 (list channel (note :pitch) (note :vel) (note :dur))))

This overview of the sequencer architecture should provide the reader with the foundation
needed to understand the more complex
sequencers, such as that in **chord-step-sequencer.scm**, which is the one I use for most
purposes at present.

The chord-step-sequencer
------------------------
During development of ScmSeq, I have gone through multiple sequencer designs, but have
recently been merging features into one main sequencer that is my default sequencer for
almost all purposes, the **chord-step-seq**, in the file **chord-sequencer.scm**.
We will not go into exhaustive detail on the code of this sequencer as it has gotten
rather large, but we will look at some of its more interesting features.

The chord track
^^^^^^^^^^^^^^^
In addition to the multiple vectors for each parameter track, the chord-step-seq includes
the **chord-data** data structure, an additional vector of lists to hold chord voicings, where
each voicing is a list at the step location in the chord-data vector. These
lists can be null, or contain a list of note numbers for the chord. This is essentially
a parrallel step-sequencer data track with one row, where each row is a list or null,
and the list can hold some arbitrary number of notes.

This track is used essentially like a chord chart: when the sequencer hits an entry,
it updates a data structure storing the *current chord*, which is then used in various
ways. This allows the user
to program chord progressions in by only entering data in the chord track where the chord changes.
This also makes real-time overrides of the active chord possible, which is used in the
arp-mode-controller to allow the user to play new chord progressions, similar to how
one does in an arpegiattor.

The sequencer has two modes for how it uses the current chord: **chord-mode** and **arp-mode**.

Chord mode
^^^^^^^^^^^
In chord-mode, the regular sequencer tracks are used as normal, but the chord data
overrides the pitch track. Used in conjunction with a custom note-output function for chords,
this allows *paraphonic* chord output, where a chord is sent out as one unit with identical
values for each pfield with the exception of pitch. By combining this with variable
ptrk loop lengths, one can program chord vamps very quickly, and one can also 
create chord sequences in which elements of the chord (velocity,
modulation data, etc) have polyrhythmic relations to each other.

Arp mode
^^^^^^^^^
In arp mode, the pitch ptrack data is not ignored, but is instead interpreted as
an integer corresponding to the *factor* of the data in the chord track. Options
exist to wrap or to wrap with octave. That is to say, that given a four-note
chord in the chord track, a pitch value of 1 will play the first (bottom) note, while 5 
can either result in playing either the first note of the chord, or the first note up an octave.
This allows programming in arpeggiation patterns that change actual notes
when the currently active chord changes.

This can also be useful for percussion tracking, as one can have "chords" that are
mapped to banks of logically similar samples (e.g. four types of snare hit),
and the factors correspond to those. 

Arp controller
^^^^^^^^^^^^^^
These features are meant to be used with the **arp-controller** input mode
(in controllers.scm). This controller includes facilities to allow a user
to play a chord on one of the keyboards, and have it either 
overide, program, or play chords in the chord sequencer:

* In **program**, the played chord is written (permanently) into the chord track
  at the curently selected track, much like programming in step-mode
* In **override**, the played chord replaces the active playing chord until the chord
  track hits a new chord
* In **play**, the played chord replaces the active playing chord until one reverts
  the sequencer to playing stored chords

Additionally, the grid buttons are used in this controller to program the numerical
steps for the pitch ptrack (the chord factors). By combining this with the
chord playing facility, and the fact that the gate (on/off) and velocity
ptracks can loop at different settings from the factor ptrack, one can very quickly
create sophisticated arpeggiation patterns with complex polyrhythmic elements.

Finally, all of the elements highlighted can of course be controlled from
Scheme functions scheduled as a score or triggered by MIDI notes from the
host sequencer (e.g. Live "scenes"). This enables the rapid creation of complex arrangements
of chord lines by changing chord data or ptrack settings at various
points in a score.

Hook functions
^^^^^^^^^^^^^^
The chord-step-sequencer (and in fact the regular step-seq as well) implements
lifecycle hook functions for creating algorithmic music. These are places where
the sequencer looks for a function, and if one exists, runs this *in the scope
of the local environment*. This allows the user to specify, for example,
a local function that should be run every bar, eight bars, beat, and so on,
and which has the capability of changing anything in the sequencer.
Hook points exist for:

* before-step
* after-step 
* before-loop 
* after-loop 
* before-reps 
* after-reps 
* on-start 
* on-stop 

These can write to any of the sequencers local variables, or even redefine
functions. This is particularly useful for stochastic music, where on
some temporal boundary, we want to execute a function that has some probability
of mutating the sequencer or the sequence data. An interesting effect can 
be achieved, for example, by changing the **time-factor**, so that the
duration of steps changes as the sequence plays. This can use chance,
or follow a pattern specified in the function or in any data structure
accessible to the sequencer.

Absolute time tracking 
^^^^^^^^^^^^^^^^^^^^^^^
The chord-step-seq also keeps a running total of ticks, steps, and loop 
repetitions elapsed. In conjunction with the hook functions, this can
be used to inject function calls at some arbitrary time
of playback. This can be used, for example, to have the sequencer
stop itself at a time or after a certain number of repeitions, or to have it execute
functions that schedule such. 

